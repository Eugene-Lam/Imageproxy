stages:
  - lint
  - test
  - build
  - deploy
  - review
  - dast
  - fuzz
  - staging
  - canary
  - production
  - incremental rollout 10%
  - incremental rollout 25%
  - incremental rollout 50%
  - incremental rollout 100%
  - performance
  - cleanup

docker-build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker pull tonistiigi/binfmt:latest
    - docker run --privileged --rm tonistiigi/binfmt --uninstall qemu-*
    - docker run --privileged --rm tonistiigi/binfmt --install all
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker buildx create --use
    - docker buildx build -f Dockerfile --push --pull -t "${CI_REGISTRY_IMAGE}${tag}" -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" --platform linux/amd64,linux/arm64 .
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $PULL != "true"
      exists:
        - Dockerfile

pull:
  image: alpine:latest
  before_script:
    - apk add git
    - git checkout main
    - git remote set-url origin https://root:$gitlab_token@$CI_SERVER_HOST/$CI_PROJECT_PATH.git
    - git remote add upstream https://github.com/willnorris/imageproxy || git remote set-url upstream https://github.com/willnorris/imageproxy
    - git config --global user.email "bot@metahkg.org"
    - git config --global user.name "metahkg-bot"
    - git config pull.rebase false
    - git pull origin main
  script:
    - |
      git fetch upstream
      git merge -X theirs upstream/main -m "Pull upstream" --allow-unrelated-histories
      git push origin --all
  rules:
    - if: $PULL == "true"

test:
  stage: test
  image: gliderlabs/herokuish:latest-22
  allow_failure: true
  before_script:
    - apt-get update && apt-get install golang -y
    - go install github.com/polyfloyd/go-errorlint@latest
    - export PATH=$PATH:/root/go/bin
    - alias errorlint="go-errorlint"

build:
  stage: build
  allow_failure: true

container_scanning:
  stage: review
  needs: [ "docker-build" ]
  variables:
    GIT_STRATEGY: fetch
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE
    CI_APPLICATION_TAG: $CI_COMMIT_SHORT_SHA
    CLAIR_OUTPUT: High
  artifacts:
    paths:
      - gl-container-scanning-report.json
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "main"
      exists:
        - Dockerfile

include:
  - template: Auto-DevOps.gitlab-ci.yml
    rules:
      - if: $PULL != "true"
